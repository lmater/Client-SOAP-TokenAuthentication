package ma.service.exploit;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.opensaml.xml.util.Base64;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import ma.service.ws.CheckMessageState.CheckMessageStateWS;
import ma.service.ws.CheckMessageState.CheckMessageWS;
import ma.service.ws.GetMessageActs.GetMessageActsWS;
import ma.service.ws.GetMessageActs.GetMessageActsWS_Service;
import ma.service.ws.GetUnreadMessages.GetUnreadMessagesWS;
import ma.service.ws.GetUnreadMessages.GetUnreadMessages_Service;
import ma.service.ws.ReadMessage.ReadMessageWS;
import ma.service.ws.ReadMessage.ReadMessage_Service;
import ma.service.ws.SendMessage.SendMessageAct;
import ma.service.ws.SendMessage.SendMessageCode;
import ma.service.ws.SendMessage.SendMessageWS;
import ma.service.ws.SendMessage.SendMessageWS_Service;

public class SafeEchangeExploitWs {

	public static void main(String[] args)
			throws IOException,
			ma.service.ws.SendMessage.Exception_Exception,
			ma.service.ws.CheckMessageState.Exception_Exception,
			ma.service.ws.GetUnreadMessages.Exception_Exception,
			ParserConfigurationException,
			SAXException,
			ma.service.ws.ReadMessage.Exception_Exception,
			ma.service.ws.GetMessageActs.Exception_Exception {
		testWebMethod(3);
		// testWebMethod(6);
		// testWebMethod(7);
	}

	public static void testWebMethod(int index)
			throws IOException,
			ma.service.ws.SendMessage.Exception_Exception,
			ma.service.ws.CheckMessageState.Exception_Exception,
			ma.service.ws.GetUnreadMessages.Exception_Exception,
			ParserConfigurationException,
			SAXException,
			ma.service.ws.ReadMessage.Exception_Exception,
			ma.service.ws.GetMessageActs.Exception_Exception {
		// String login="sigile";
		String login = "";// le login est lu automatiquement depuis le
							// cirtificat
		List<String> recepteurs = new ArrayList<String>();
		recepteurs.add("user1.user1");
		recepteurs.add("test.recepteur");
		recepteurs.add("test.emetteur");
		recepteurs.add("lmater.abdellatif");
		recepteurs.add("user2.user2");
		recepteurs.add("applicationUser");
		int timeout = 1;
		String sujet = "sujet";
		String body = "corps du message corps du message corps du message corps du message test";
		SendMessageAct.Arg7 attachementsAct = prepareFilesAct();
		SendMessageCode.Arg7 attachementsCode = prepareFilesCode();
		String pin = "password";
		String correlation = "111111/1111/11111";
		String metier = "1111/2018|2123/2018|10/10/2017";
		List<String> listcodeMessage = new ArrayList<>();
		listcodeMessage.add("f3407165-c984-462b-9d57-a949de216a20");
		listcodeMessage.add("9c697af2-fffd-4c5c-a4af-3e203b9af5e5");
		listcodeMessage.add("96de9d9d-6919-4928-8eff-69c1c1a43d55");
		// 5 UnreadMessages
		// codeMessage 0: 96de9d9d-6919-4928-8eff-69c1c1a43d55
		// codeMessage 1: a4c87394-e5b8-4732-8d66-274e4f65bec1
		// codeMessage 2: 9781475e-cce8-4274-90d9-574b6b2aa177
		// codeMessage 3: cf9cae4e-747d-4e99-838c-197e2d0cd091
		// codeMessage 4: edb0d0b4-7c76-4838-be7b-5abffdf92cb8
		String codeMessage = listcodeMessage.get(2);
		String rootPathEnvoi = "G:\\MyProject\\EDI Accuse de l\'envoi\\";
		String rootPathLecture = "G:\\MyProject\\EDI Accuse de lecture\\";
		String rootPathReception = "G:\\MyProject\\EDI Fichier reception\\";

		if (index == 1) {
			// TEST getMessageState //
			String message_state_responce = checkMessageState(login,
					codeMessage);
			System.out.println("Message_state: " + message_state_responce);
			// FIN TEST getMessageState //
		} else if (index == 2) {
			// TEST getUnreadMessages //
			List<String> listUnreadMessages = getUnreadMessages(login);
			System.out.println(listUnreadMessages.size() + " UnreadMessages");
			for (int i = 0; i < listUnreadMessages.size(); i++)
				System.out.println("codeMessage " + i + ": "
						+ listUnreadMessages.get(i));
			// FIN TEST getUnreadMessages //
		} else if (index == 3) {
			// TEST readMessage //
			byte[] message = readMessage(login, codeMessage, pin);
			String FilefullPath = rootPathReception + "message_" + codeMessage
					+ "_" + new Date().getTime();
			ByteToFileArray(FilefullPath, message);
			HashMap<String, HashMap<String, Object>> MessageContent = readMessageContent(FilefullPath);
			System.out.println("Message content:");
			if (MessageContent.get("Message").containsKey("code"))
				System.out.println("code : "
						+ MessageContent.get("Message").get("code"));
			if (MessageContent.get("Message").containsKey("Sender"))
				System.out.println("Sender : "
						+ MessageContent.get("Message").get("Sender"));
			if (MessageContent.get("Message").containsKey("Correlation"))
				System.out.println("Correlation : "
						+ MessageContent.get("Message").get("Correlation"));
			if (MessageContent.get("Message").containsKey("Metier"))
				System.out.println("Metier : "
						+ MessageContent.get("Message").get("Metier"));
			if (MessageContent.get("Message").containsKey("Subject"))
				System.out.println("Subject : "
						+ MessageContent.get("Message").get("Subject"));
			if (MessageContent.get("Message").containsKey("Body"))
				System.out.println("Body : "
						+ MessageContent.get("Message").get("Body"));
			if (MessageContent.get("Message").containsKey("Attachments")) {
				for (int k = 0; k < ((List<Object[]>) MessageContent.get(
						"Message").get("Attachments")).size(); k++) {
					System.out.println("Attachments : "
							+ ((List<Object[]>) MessageContent.get("Message")
									.get("Attachments")).get(k)[1]);
					String id = (String) ((List<Object[]>) MessageContent.get(
							"Message").get("Attachments")).get(k)[0];
					String name = (String) ((List<Object[]>) MessageContent
							.get("Message").get("Attachments")).get(k)[1];
					byte[] stream = Base64
							.decode((String) ((List<Object[]>) MessageContent
									.get("Message").get("Attachments")).get(k)[2]);
					FilefullPath = rootPathReception + new Date().getTime()
							+ " Elemnt " + k + " " + name;
					ByteToFileArray(FilefullPath, stream);
				}
			}
			// FIN TEST readMessage //
		} else if (index == 4) {
			// TEST sendMessageAct //
			byte[] accuse_envoi_responce = SendMessageAct_execute(login,
					recepteurs, timeout, sujet, correlation, metier, body,
					attachementsAct, pin);
			String FullPath = rootPathEnvoi + "accuse_envoi_"
					+ new Date().getTime() + ".pdf";
			ByteToFileArray(FullPath, accuse_envoi_responce);
			System.out.println("Accuse_envoi at: " + FullPath);
			// FIN TEST sendMessageAct //
		} else if (index == 5) {
			// TEST SendMessageCode //
			String codeMessage_responce = SendMessageCode_execute(login,
					recepteurs, timeout, sujet, correlation, metier, body,
					attachementsCode, pin);
			System.out.println("codeMessage_responce: " + codeMessage_responce);
			// FIN TEST SendMessageCode //
		} else if (index == 6) {
			// TEST GetSendingAct //
			byte[] accuse_envoi_byCode_responce = GetSendingAct_execute(login,
					codeMessage);
			String FullPath = rootPathEnvoi + "accuse_envoi_bycode_"
					+ new Date().getTime() + ".pdf";
			ByteToFileArray(FullPath, accuse_envoi_byCode_responce);
			System.out.println("accuse_envoi_bycode_ at: " + FullPath);
			// FIN TEST GetSendingAct //
		} else if (index == 7) {
			// TEST GetReadingActs //
			List<byte[]> accuses_lecture = GetReadingActs_execute(login,
					codeMessage);
			for (int i = 0; i < accuses_lecture.size(); i++) {
				String FullPathlecture = rootPathLecture + "accuse_lecture_"
						+ i + "_codeMessage_" + new Date().getTime() + ".pdf";
				ByteToFileArray(FullPathlecture, accuses_lecture.get(i));
				System.out.println("Accuse_lecture " + i + " at: "
						+ FullPathlecture);
			}
			if (accuses_lecture.size() == 0)
				System.out.println("Message non lu ");
			// FIN TEST GetReadingActs //
		}
	}

	public static byte[] SendMessageAct_execute(String arg0, List<String> arg1,
			int arg2, String arg3, String arg4, String arg5, String arg6,
			SendMessageAct.Arg7 arg7, String arg8)
			throws ma.service.ws.SendMessage.Exception_Exception,
			IOException {
		SendMessageWS_Service sendMessage = new SendMessageWS_Service();
		SendMessageWS port = sendMessage.getSendMessageWSImplPort();
		byte[] accuse_envoi = port.sendMessageAct(arg0, arg1, arg2, arg3, arg4,
				arg5, arg6, arg7, arg8);
		return accuse_envoi;
	}

	public static String checkMessageState(String login, String codeMessage)
			throws ma.service.ws.CheckMessageState.Exception_Exception {
		CheckMessageWS checkMessageWS = new CheckMessageWS();
		CheckMessageStateWS port = checkMessageWS
				.getCheckMessageStateWSImplPort();
		return port.getMessageState(login, codeMessage);
	}

	public static List<String> getUnreadMessages(String login)
			throws IOException,
			ma.service.ws.GetUnreadMessages.Exception_Exception {
		GetUnreadMessages_Service UnreadMessages = new GetUnreadMessages_Service();
		GetUnreadMessagesWS port = UnreadMessages
				.getGetUnreadMessagesWSImplPort();
		return port.getUnreadMessages(login);
	}

	public static byte[] readMessage(String login, String messageCode,
			String pin)
			throws IOException,
			ParserConfigurationException,
			SAXException,
			ma.service.ws.ReadMessage.Exception_Exception {
		ReadMessage_Service UnreadMessages = new ReadMessage_Service();
		ReadMessageWS port = UnreadMessages.getReadMessageWSImplPort();
		byte[] message = port.readMessage(login, messageCode, pin);
		return message;
	}

	public static String SendMessageCode_execute(String arg0,
			List<String> arg1, int arg2, String arg3, String arg4, String arg5,
			String arg6, SendMessageCode.Arg7 arg7, String arg8)
			throws ma.service.ws.SendMessage.Exception_Exception,
			IOException {
		SendMessageWS_Service sendMessage = new SendMessageWS_Service();
		SendMessageWS port = sendMessage.getSendMessageWSImplPort();
		String MessageCode = port.sendMessageCode(arg0, arg1, arg2, arg3, arg4,
				arg5, arg6, arg7, arg8);
		return MessageCode;
	}

	public static List<byte[]> GetReadingActs_execute(String login,
			String messageCode)
			throws ma.service.ws.GetMessageActs.Exception_Exception,
			IOException {
		GetMessageActsWS_Service ReadingMessage = new GetMessageActsWS_Service();
		GetMessageActsWS port = ReadingMessage.getGetMessageActsWSImplPort();
		List<byte[]> accuses_lecture = port.getReadingActs(login, messageCode);
		return accuses_lecture;
	}

	public static byte[] GetSendingAct_execute(String login, String messageCode)
			throws ma.service.ws.GetMessageActs.Exception_Exception,
			IOException {
		GetMessageActsWS_Service ReadingMessage = new GetMessageActsWS_Service();
		GetMessageActsWS port = ReadingMessage.getGetMessageActsWSImplPort();
		byte[] accuses_envoi = port.getSendingAct(login, messageCode);
		return accuses_envoi;
	}

	static public byte[] FiletoByteArray(String path) throws IOException {
		File fichier = new File(path);
		byte[] tableau = new byte[(int) fichier.length()];
		FileInputStream in = new FileInputStream(fichier);
		in.read(tableau);
		return tableau;
	}

	static public void ByteToFileArray(String path, byte[] byteArray)
			throws IOException {
		Files.write(new File(path).toPath(), byteArray);
	}

	static public SendMessageAct.Arg7 prepareFilesAct() throws IOException {
		SendMessageAct.Arg7 arg7 = new SendMessageAct.Arg7();
		ma.service.ws.SendMessage.SendMessageAct.Arg7.Entry entry = new ma.service.ws.SendMessage.SendMessageAct.Arg7.Entry();
		String path = "G:\\MyProject\\EDI Fichier pour envoi\\";
		String fileName = "accuse_envoi1.pdf";
		byte[] tableau = FiletoByteArray(path + fileName);
		entry.setKey(fileName);
		entry.setValue(tableau);
		arg7.getEntry().add(entry);
		entry = new ma.service.ws.SendMessage.SendMessageAct.Arg7.Entry();
		fileName = "accuse_envoi2.pdf";
		tableau = FiletoByteArray(path + fileName);
		entry.setKey(fileName);
		entry.setValue(tableau);
		arg7.getEntry().add(entry);
		entry = new ma.service.ws.SendMessage.SendMessageAct.Arg7.Entry();
		fileName = "accuse_envoi3.pdf";
		tableau = FiletoByteArray(path + fileName);
		entry.setKey(fileName);
		entry.setValue(tableau);
		arg7.getEntry().add(entry);
		entry = new ma.service.ws.SendMessage.SendMessageAct.Arg7.Entry();
		fileName = "accuse_envoi4.pdf";
		tableau = FiletoByteArray(path + fileName);
		entry.setKey(fileName);
		entry.setValue(tableau);
		arg7.getEntry().add(entry);
		return arg7;
	}

	static public SendMessageCode.Arg7 prepareFilesCode() throws IOException {
		SendMessageCode.Arg7 arg7 = new SendMessageCode.Arg7();
		ma.service.ws.SendMessage.SendMessageCode.Arg7.Entry entry = new ma.service.ws.SendMessage.SendMessageCode.Arg7.Entry();
		String path = "G:\\MyProject\\EDI Fichier pour envoi\\";
		String fileName = "accuse_envoi1.pdf";
		byte[] tableau = FiletoByteArray(path + fileName);
		entry.setKey(fileName);
		entry.setValue(tableau);
		arg7.getEntry().add(entry);
		entry = new ma.service.ws.SendMessage.SendMessageCode.Arg7.Entry();
		fileName = "accuse_envoi2.pdf";
		tableau = FiletoByteArray(path + fileName);
		entry.setKey(fileName);
		entry.setValue(tableau);
		arg7.getEntry().add(entry);
		entry = new ma.service.ws.SendMessage.SendMessageCode.Arg7.Entry();
		fileName = "accuse_envoi3.pdf";
		tableau = FiletoByteArray(path + fileName);
		entry.setKey(fileName);
		entry.setValue(tableau);
		arg7.getEntry().add(entry);
		entry = new ma.service.ws.SendMessage.SendMessageCode.Arg7.Entry();
		fileName = "accuse_envoi4.pdf";
		tableau = FiletoByteArray(path + fileName);
		entry.setKey(fileName);
		entry.setValue(tableau);
		arg7.getEntry().add(entry);
		return arg7;
	}

	public static HashMap<String, HashMap<String, Object>> readMessageContent(
			String FilefullPath) throws ParserConfigurationException,
			SAXException, IOException {

		HashMap<String, HashMap<String, Object>> node = new HashMap<String, HashMap<String, Object>>();

		File fXmlFile = new File(FilefullPath);
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
		Document doc = dBuilder.parse(fXmlFile);
		doc.getDocumentElement().normalize();
		node.put(doc.getDocumentElement().getNodeName(), null);
		NodeList nList = doc.getElementsByTagName("Message");
		if (nList.getLength() > 0) {
			HashMap<String, Object> elements = new HashMap<String, Object>();
			Node nNode = nList.item(0);
			if (nNode.getNodeType() == Node.ELEMENT_NODE) {
				Element eElement = (Element) nNode;
				elements.put("code",
						eElement + "" + eElement.getAttribute("code"));
				if (eElement.getElementsByTagName("Sender").item(0)
						.hasChildNodes())
					elements.put("Sender",
							eElement.getElementsByTagName("Sender").item(0)
									.getFirstChild().getNodeValue());
				if (eElement.getElementsByTagName("Correlation").item(0)
						.hasChildNodes())
					elements.put("Correlation",
							eElement.getElementsByTagName("Correlation")
									.item(0).getFirstChild().getNodeValue());
				if (eElement.getElementsByTagName("Metier").item(0)
						.hasChildNodes())
					elements.put("Metier",
							eElement.getElementsByTagName("Metier").item(0)
									.getFirstChild().getNodeValue());
				if (eElement.getElementsByTagName("Subject").item(0)
						.hasChildNodes())
					elements.put("Subject",
							eElement.getElementsByTagName("Subject").item(0)
									.getFirstChild().getNodeValue());
				if (eElement.getElementsByTagName("Body").item(0)
						.hasChildNodes())
					elements.put("Body", eElement.getElementsByTagName("Body")
							.item(0).getFirstChild().getNodeValue());
				if (eElement.getElementsByTagName("Attachments").getLength() > 0) {
					List<Object[]> Attachments = new ArrayList<Object[]>();
					if (eElement.getElementsByTagName("Attachments").item(0)
							.hasChildNodes()) {
						NodeList nNodelist = (NodeList) eElement
								.getElementsByTagName("Attachments").item(0)
								.getChildNodes();
						for (int i = 0; i < nNodelist.getLength(); i++) {
							Object[] AttachmentsMap = new Object[4];
							Element eElementAttachments = (Element) nNodelist
									.item(i);
							AttachmentsMap[0] = eElementAttachments
									.getAttribute("id");
							AttachmentsMap[1] = eElementAttachments
									.getElementsByTagName("Name").item(0)
									.getFirstChild().getNodeValue();
							AttachmentsMap[2] = eElementAttachments
									.getElementsByTagName("Stream").item(0)
									.getFirstChild().getNodeValue();
							AttachmentsMap[3] = eElementAttachments
									.getElementsByTagName("Size").item(0)
									.getFirstChild().getNodeValue();
							Attachments.add(AttachmentsMap);
							elements.put("Attachments", Attachments);
						}
					}
				}

			}
			node.put("Message", elements);
		}
		return node;
	}

	public static URL makeConnection(String wsdlLocation)
			throws MalformedURLException {
		// TrustStore
		String strTrustedKeyStore = "G:/MyProject/wsconnection/truststore.jks";
		System.setProperty("javax.net.ssl.trustStore", strTrustedKeyStore);
		System.setProperty("javax.net.ssl.trustStorePassword", "password");

		// KeyStore
		String keyTrustedKeyStore = "G:/MyProject/wsconnection/sigile.auth.p12";
		System.setProperty("javax.net.ssl.keyStoreType", "pkcs12");
		System.setProperty("javax.net.ssl.keyStore", keyTrustedKeyStore);
		System.setProperty("javax.net.ssl.keyStorePassword", "password");

		URL wsdlURL = new URL(wsdlLocation);
		return wsdlURL;
	}

}
